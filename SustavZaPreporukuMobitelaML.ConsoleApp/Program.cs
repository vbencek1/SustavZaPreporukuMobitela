// This file was auto-generated by ML.NET Model Builder. 

using System;
using SustavZaPreporukuMobitelaML.Model;

namespace SustavZaPreporukuMobitelaML.ConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            // Create single instance of sample data from first line of dataset for model input
            ModelInput sampleData = new ModelInput()
            {
                Brand = args[1],
                Four_g_network = float.Parse(args[2]),
                EDGE = float.Parse(args[3]),
                Announced = float.Parse(args[4]),
                Weight_g = float.Parse(args[5]),
                SIM = float.Parse(args[6]),
                Display = float.Parse(args[7]),
                OS = args[8],
                CPU = float.Parse(args[9]),
                Memory_card = float.Parse(args[10]),
                Internal_memory = float.Parse(args[11]),
                RAM = float.Parse(args[12]),
                Camera = float.Parse(args[13]),
                Loud_speaker = float.Parse(args[14]),
                Audio_jack = float.Parse(args[15]),
                Bluetooth = float.Parse(args[16]),
                GPS = float.Parse(args[17]),
                NFC = float.Parse(args[18]),
                Radio = float.Parse(args[19]),
                Baterry = float.Parse(args[20]),
                Approx_price_EUR = float.Parse(args[21]),
            };

            // Make a single prediction on the sample data and print results
            var predictionResult = ConsumeModel.Predict(sampleData);

            Console.WriteLine("Using model to make single prediction -- Comparing actual Model with predicted Model from sample data...\n\n");
            Console.WriteLine($"Brand: {sampleData.Brand}");
            Console.WriteLine($"Four_g_network: {sampleData.Four_g_network}");
            Console.WriteLine($"EDGE: {sampleData.EDGE}");
            Console.WriteLine($"Announced: {sampleData.Announced}");
            Console.WriteLine($"Weight_g: {sampleData.Weight_g}");
            Console.WriteLine($"SIM: {sampleData.SIM}");
            Console.WriteLine($"Display: {sampleData.Display}");
            Console.WriteLine($"OS: {sampleData.OS}");
            Console.WriteLine($"CPU: {sampleData.CPU}");
            Console.WriteLine($"Memory_card: {sampleData.Memory_card}");
            Console.WriteLine($"Internal_memory: {sampleData.Internal_memory}");
            Console.WriteLine($"RAM: {sampleData.RAM}");
            Console.WriteLine($"Camera: {sampleData.Camera}");
            Console.WriteLine($"Loud_speaker: {sampleData.Loud_speaker}");
            Console.WriteLine($"Audio_jack: {sampleData.Audio_jack}");
            Console.WriteLine($"Bluetooth: {sampleData.Bluetooth}");
            Console.WriteLine($"GPS: {sampleData.GPS}");
            Console.WriteLine($"NFC: {sampleData.NFC}");
            Console.WriteLine($"Radio: {sampleData.Radio}");
            Console.WriteLine($"Baterry: {sampleData.Baterry}");
            Console.WriteLine($"Approx_price_EUR: {sampleData.Approx_price_EUR}");
            Console.WriteLine($"\n\nPredicted Model value {predictionResult.Prediction} \nPredicted Model scores: [{String.Join(",", predictionResult.Score)}]\n\n");
            //System.IO.File.WriteAllText(@"..\..\..\..\predikcija.txt", predictionResult.Prediction);
            String file = "junk.txt";
            switch (args[0])
            {
                case "pid1": file = "predikcija1.txt";
                    break;
                case "pid2": file = "predikcija2.txt"; 
                    break;
                case "pid3": file = "predikcija3.txt"; 
                    break;
            }
            System.IO.File.WriteAllText(@"..\..\..\"+file, predictionResult.Prediction);
            Console.WriteLine("=============== End of process, hit any key to finish ===============");
        }
    }
}
